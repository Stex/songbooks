q
sections.last
c
content.lines.first
content.lines.last
content.lines.size
content.lines
content
q
content.lines.size
content.lines.last
content.lines.inspect
content.lines
p content
q
meta
q
content
q
content
text
q
content
text
meta
q
text
c
text
q
"@artist" =~ /\A@artist/
text =~ /\A@artist/
text =~ /^@artist/
text
regexp
text.match(regexp)
text
match
text
c
match
q
text
match[0]
match[0].length
match
name
c
name
nymd
nyme
q
"\n".slice(0..2)
"\n".slice(0..1)
"\n".slice(0)
"\n".slice(0..0)
"\n".length
"\n"
q
text
text.delete!('dddd')
text
text.delete('dddd')
text = 'a s dddd f'
meta
q
content
meta
q
content
c
text
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)yqq
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
content
match
c
match
c
match
c
match
c
match
c
match
c
match
c
match
c
match
c
match
c
match
c
match
c
match
c
match
q
c
sections[1].lines.first
sections[1].lines
sections[1]
section.second
sections.first.lines.second
sections.first.lines.first
sections.first.lines
sections.first
sections.first.content_lines
.content_lines
sections.first
sections
q
content
c
Songbooks::Components::Literal.munch_literal(content.lines.first.rstrip)
content.lines.first.rstrip
content.lines.first
content
c
content.lines.first
content.lines
content
q
content
q
meta
q
content
q
content
text
q
content
text
meta
q
text
c
text
q
"@artist" =~ /\A@artist/
text =~ /\A@artist/
text =~ /^@artist/
text
regexp
text.match(regexp)
text
match
text
c
match
q
text
match[0]
match[0].length
match
name
c
name
nymd
nyme
q
"\n".slice(0..2)
"\n".slice(0..1)
"\n".slice(0)
"\n".slice(0..0)
"\n".length
"\n"
q
text
text.delete!('dddd')
text
text.delete('dddd')
text = 'a s dddd f'
meta
q
content
meta
q
content
c
text
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)yqq
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
Songbooks::Components::Metadata.munch_header(content)
q
content
match
c
match
c
match
c
match
c
match
c
match
c
match
c
match
c
match
c
match
c
match
c
match
c
